name: Deploy to Hostinger VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME_CLIENT: ksaunibliss-client
  IMAGE_NAME_SERVER: ksaunibliss-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push client image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        file: ./client/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CLIENT }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CLIENT }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push server image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_SERVER }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_SERVER }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Hostinger VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          echo "Starting deployment..."
          
          # Navigate to application directory
          cd /home/${{ secrets.USERNAME }}/ksaunibliss || {
            echo "Creating application directory..."
            mkdir -p /home/${{ secrets.USERNAME }}/ksaunibliss
            cd /home/${{ secrets.USERNAME }}/ksaunibliss
          }
          
          # Download latest docker-compose file
          curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
          
          # Login to Docker Hub
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          
          # Stop existing containers
          docker-compose down || true
          
          # Remove old images
          docker image prune -f
          
          # Pull latest images
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CLIENT }}:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_SERVER }}:latest
          
          # Update docker-compose to use the new images
          sed -i "s|build:|#build:|g" docker-compose.yml
          sed -i "s|context: ./client|#context: ./client|g" docker-compose.yml
          sed -i "s|dockerfile: Dockerfile|#dockerfile: Dockerfile|g" docker-compose.yml
          sed -i "s|#image: |image: |g" docker-compose.yml || true
          
          # Add image references if not present
          if ! grep -q "image:" docker-compose.yml; then
            sed -i "/client:/a\\    image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_CLIENT }}:latest" docker-compose.yml
            sed -i "/server:/a\\    image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_SERVER }}:latest" docker-compose.yml
          fi
          
          # Update environment variables for production
          export DOMAIN_NAME="ksaunibliss.com"
          sed -i "s|FRONTEND_URL=.*|FRONTEND_URL=https://$DOMAIN_NAME|g" docker-compose.yml
          
          # Start containers
          docker-compose up -d
          
          # Verify deployment
          sleep 10
          if docker ps | grep -q "ksaunibliss"; then
            echo "‚úÖ Deployment successful!"
            docker ps
          else
            echo "‚ùå Deployment failed!"
            docker logs $(docker ps -aq) --tail 50
            exit 1
          fi
          
          # Cleanup
          docker system prune -f
          
          echo "üöÄ Deployment completed successfully!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment to Hostinger completed successfully!"
        else
          echo "‚ùå Deployment to Hostinger failed!"
        fi
